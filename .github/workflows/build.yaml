name: Build EOPF container images

on: 
  workflow_dispatch:
  push:
    paths:
      - 'eopf-dask/**'
      - 'eopf-jupyterlab/**'
      - 'eopf-zarr-driver/**'


jobs:
  build-dask-image:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Make sure buildx is used
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to EOPF Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: https://harbor.user.eopf.eodc.eu/
          username: ${{ secrets.HARBOR_ROBOT_USER }}
          password: ${{ secrets.HARBOR_ROBOT_PWD }}

      # Build and push image
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'}}
          tags: harbor.user.eopf.eodc.eu/jupyterdask/eopf-dask:latest
          file: eopf-dask/eopf-dask.dockerfile

  build-jupyterlab-image:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: "latest"

      - name: Create lockenv
        run: micromamba create -n lockenv

      - name: Install conda-lock
        run: micromamba install -y -n lockenv -c conda-forge conda-lock

      - name: Generate conda lock file
        run: micromamba run -n lockenv conda-lock lock -f eopf-jupyterlab/environment.yml -p linux-64 -c conda-forge

      - name: Upload lock file
        uses: actions/upload-artifact@v4
        with:
          name: conda-lock
          path: conda-lock.yml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Make sure buildx is used
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to EOPF Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: https://harbor.user.eopf.eodc.eu/
          username: ${{ secrets.HARBOR_ROBOT_USER }}
          password: ${{ secrets.HARBOR_ROBOT_PWD }}

      # Build and push image
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          tags: harbor.user.eopf.eodc.eu/jupyterdask/eopf-jupyterlab:latest
          file: eopf-jupyterlab/eopf-jupyterlab.dockerfile

  build-zarr-driver-image:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Make sure buildx is used
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to EOPF Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: https://harbor.user.eopf.eodc.eu/
          username: ${{ secrets.HARBOR_ROBOT_USER }}
          password: ${{ secrets.HARBOR_ROBOT_PWD }}

      # Build and push image
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          tags: harbor.user.eopf.eodc.eu/jupyterdask/eopf-zarr-driver:latest
          file: eopf-zarr-driver/Dockerfile
